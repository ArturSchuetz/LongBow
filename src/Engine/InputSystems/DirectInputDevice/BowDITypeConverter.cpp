#include "BowDITypeConverter.h"
#include "BowLogger.h"

#include "IBowMouse.h"
#include "IBowKeyboard.h"

#include <dinput.h>

namespace Bow {
	namespace Input {

		unsigned int DITypeConverter::To(Key key)
		{
			switch (key)
			{
			case Key::K_0:
				return DIK_0;
			case Key::K_1:
				return DIK_1;
			case Key::K_2:
				return DIK_2;
			case Key::K_3:
				return DIK_3;
			case Key::K_4:
				return DIK_4;
			case Key::K_5:
				return DIK_5;
			case Key::K_6:
				return DIK_6;
			case Key::K_7:
				return DIK_7;
			case Key::K_8:
				return DIK_8;
			case Key::K_9:
				return DIK_9;
			case Key::K_A:
				return DIK_A;
			case Key::K_B:
				return DIK_B;
			case Key::K_C:
				return DIK_C;
			case Key::K_D:
				return DIK_D;
			case Key::K_E:
				return DIK_E;
			case Key::K_F:
				return DIK_F;
			case Key::K_G:
				return DIK_G;
			case Key::K_H:
				return DIK_H;
			case Key::K_I:
				return DIK_I;
			case Key::K_J:
				return DIK_J;
			case Key::K_K:
				return DIK_K;
			case Key::K_L:
				return DIK_L;
			case Key::K_M:
				return DIK_M;
			case Key::K_N:
				return DIK_N;
			case Key::K_O:
				return DIK_O;
			case Key::K_P:
				return DIK_P;
			case Key::K_Q:
				return DIK_Q;
			case Key::K_R:
				return DIK_R;
			case Key::K_S:
				return DIK_S;
			case Key::K_T:
				return DIK_T;
			case Key::K_U:
				return DIK_U;
			case Key::K_V:
				return DIK_V;
			case Key::K_W:
				return DIK_W;
			case Key::K_X:
				return DIK_X;
			case Key::K_Y:
				return DIK_Y;
			case Key::K_Z:
				return DIK_Z;
			case Key::K_ABNT_C1:
				return DIK_ABNT_C1;
			case Key::K_ABNT_C2:
				return DIK_ABNT_C2;
			case Key::K_ADD:
				return DIK_ADD;
			case Key::K_APOSTROPHE:
				return DIK_APOSTROPHE;
			case Key::K_APPS:
				return DIK_APPS;
			case Key::K_AT:
				return DIK_AT;
			case Key::K_AX:
				return DIK_AX;
			case Key::K_BACK:
				return DIK_BACK;
			case Key::K_BACKSLASH:
				return DIK_BACKSLASH;
			case Key::K_CALCULATOR:
				return DIK_CALCULATOR;
			case Key::K_CAPITAL:
				return DIK_CAPITAL;
			case Key::K_COLON:
				return DIK_COLON;
			case Key::K_COMMA:
				return DIK_COMMA;
			case Key::K_CONVERT:
				return DIK_CONVERT;
			case Key::K_DECIMAL:
				return DIK_DECIMAL;
			case Key::K_DELETE:
				return DIK_DELETE;
			case Key::K_DIVIDE:
				return DIK_DIVIDE;
			case Key::K_DOWN:
				return DIK_DOWN;
			case Key::K_END:
				return DIK_END;
			case Key::K_EQUALS:
				return DIK_EQUALS;
			case Key::K_ESCAPE:
				return DIK_ESCAPE;
			case Key::K_F1:
				return DIK_F1;
			case Key::K_F2:
				return DIK_F2;
			case Key::K_F3:
				return DIK_F3;
			case Key::K_F4:
				return DIK_F4;
			case Key::K_F5:
				return DIK_F5;
			case Key::K_F6:
				return DIK_F6;
			case Key::K_F7:
				return DIK_F7;
			case Key::K_F8:
				return DIK_F8;
			case Key::K_F9:
				return DIK_F9;
			case Key::K_F10:
				return DIK_F10;
			case Key::K_F11:
				return DIK_F11;
			case Key::K_F12:
				return DIK_F12;
			case Key::K_F13:
				return DIK_F13;
			case Key::K_F14:
				return DIK_F14;
			case Key::K_F15:
				return DIK_F15;
			case Key::K_GRAVE:
				return DIK_GRAVE;
			case Key::K_HOME:
				return DIK_HOME;
			case Key::K_INSERT:
				return DIK_INSERT;
			case Key::K_KANA:
				return DIK_KANA;
			case Key::K_KANJI:
				return DIK_KANJI;
			case Key::K_LBRACKET:
				return DIK_LBRACKET;
			case Key::K_LCONTROL:
				return DIK_LCONTROL;
			case Key::K_LEFT:
				return DIK_LEFT;
			case Key::K_LMENU:
				return DIK_LMENU;
			case Key::K_LSHIFT:
				return DIK_LSHIFT;
			case Key::K_LWIN:
				return DIK_LWIN;
			case Key::K_MAIL:
				return DIK_MAIL;
			case Key::K_MEDIASELECT:
				return DIK_MEDIASELECT;
			case Key::K_MEDIASTOP:
				return DIK_MEDIASTOP;
			case Key::K_MINUS:
				return DIK_MINUS;
			case Key::K_MULTIPLY:
				return DIK_MULTIPLY;
			case Key::K_MUTE:
				return DIK_MUTE;
			case Key::K_MYCOMPUTER:
				return DIK_MYCOMPUTER;
			case Key::K_NEXT:
				return DIK_NEXT;
			case Key::K_NEXTTRACK:
				return DIK_NEXTTRACK;
			case Key::K_NOCONVERT:
				return DIK_NOCONVERT;
			case Key::K_NUMLOCK:
				return DIK_NUMLOCK;
			case Key::K_NUMPAD0:
				return DIK_NUMPAD0;
			case Key::K_NUMPAD1:
				return DIK_NUMPAD1;
			case Key::K_NUMPAD2:
				return DIK_NUMPAD2;
			case Key::K_NUMPAD3:
				return DIK_NUMPAD3;
			case Key::K_NUMPAD4:
				return DIK_NUMPAD4;
			case Key::K_NUMPAD5:
				return DIK_NUMPAD5;
			case Key::K_NUMPAD6:
				return DIK_NUMPAD6;
			case Key::K_NUMPAD7:
				return DIK_NUMPAD7;
			case Key::K_NUMPAD8:
				return DIK_NUMPAD8;
			case Key::K_NUMPAD9:
				return DIK_NUMPAD9;
			case Key::K_NUMPADCOMMA:
				return DIK_NUMPADCOMMA;
			case Key::K_NUMPADENTER:
				return DIK_NUMPADENTER;
			case Key::K_NUMPADEQUALS:
				return DIK_NUMPADEQUALS;
			case Key::K_OEM_102:
				return DIK_OEM_102;
			case Key::K_PAUSE:
				return DIK_PAUSE;
			case Key::K_PERIOD:
				return DIK_PERIOD;
			case Key::K_PLAYPAUSE:
				return DIK_PLAYPAUSE;
			case Key::K_POWER:
				return DIK_POWER;
			case Key::K_PREVTRACK:
				return DIK_PREVTRACK;
			case Key::K_PRIOR:
				return DIK_PRIOR;
			case Key::K_RBRACKET:
				return DIK_RBRACKET;
			case Key::K_RCONTROL:
				return DIK_RCONTROL;
			case Key::K_RETURN:
				return DIK_RETURN;
			case Key::K_RIGHT:
				return DIK_RIGHT;
			case Key::K_RMENU:
				return DIK_RMENU;
			case Key::K_RSHIFT:
				return DIK_RSHIFT;
			case Key::K_RWIN:
				return DIK_RWIN;
			case Key::K_SCROLL:
				return DIK_SCROLL;
			case Key::K_SEMICOLON:
				return DIK_SEMICOLON;
			case Key::K_SLASH:
				return DIK_SLASH;
			case Key::K_SLEEP:
				return DIK_SLEEP;
			case Key::K_SPACE:
				return DIK_SPACE;
			case Key::K_STOP:
				return DIK_STOP;
			case Key::K_SUBTRACT:
				return DIK_SUBTRACT;
			case Key::K_SYSRQ:
				return DIK_SYSRQ;
			case Key::K_TAB:
				return DIK_TAB;
			case Key::K_UNDERLINE:
				return DIK_UNDERLINE;
			case Key::K_UNLABELED:
				return DIK_UNLABELED;
			case Key::K_UP:
				return DIK_UP;
			case Key::K_VOLUMEDOWN:
				return DIK_VOLUMEDOWN;
			case Key::K_VOLUMEUP:
				return DIK_VOLUMEUP;
			case Key::K_WAKE:
				return DIK_WAKE;
			case Key::K_WEBBACK:
				return DIK_WEBBACK;
			case Key::K_WEBFAVORITES:
				return DIK_WEBFAVORITES;
			case Key::K_WEBFORWARD:
				return DIK_WEBFORWARD;
			case Key::K_WEBHOME:
				return DIK_WEBHOME;
			case Key::K_WEBREFRESH:
				return DIK_WEBREFRESH;
			case Key::K_WEBSEARCH:
				return DIK_WEBSEARCH;
			case Key::K_WEBSTOP:
				return DIK_WEBSTOP;
			case Key::K_YEN:
				return DIK_YEN;
			}

			LOG_FATAL("Key does not exist.");
			return -1;
		}

		unsigned int DITypeConverter::To(MouseButton btn)
		{
			switch (btn)
			{
			case MouseButton::MOFS_BUTTON0:
				return 0;
			case MouseButton::MOFS_BUTTON1:
				return 1;
			case MouseButton::MOFS_BUTTON2:
				return 2;
			case MouseButton::MOFS_BUTTON3:
				return 3;
			case MouseButton::MOFS_BUTTON4:
				return 4;
			case MouseButton::MOFS_BUTTON5:
				return 5;
			case MouseButton::MOFS_BUTTON6:
				return 6;
			case MouseButton::MOFS_BUTTON7:
				return 7;
			}

			LOG_FATAL("Button does not exist.");
			return -1;
		}
	}
}